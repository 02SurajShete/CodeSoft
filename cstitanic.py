# -*- coding: utf-8 -*-
"""CSTitanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b1NaMthjIwx1m48u8Q21ETr9pF0_RLtx

**Titanic Survival Prediction**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

titanic_df = pd.read_csv('/content/sample_data/Titanic.csv')

print(titanic_df.head())  # Display the first few rows of the dataset
print(titanic_df.info())  # Get an overview of the dataset

print(titanic_df.isna().sum())

# Handle missing values in 'Age' column
titanic_df['Age'].fillna(titanic_df['Age'].median(), inplace=True)

# Drop 'Cabin' column
# titanic_df.drop('Cabin', axis=1, inplace=True)
titanic_df['Cabin'].fillna(titanic_df['Cabin'].mode()[0], inplace=True)


# Handle missing values in 'Embarked' column
titanic_df['Embarked'].fillna(titanic_df['Embarked'].mode()[0], inplace=True)

print(titanic_df.isna().sum()

# Visualize the distribution of survival
sns.countplot(x='Survived', data=titanic_df)
plt.title('Distribution of Survival')
plt.show()

# Visualize survival by other variables
sns.countplot(x='Survived', hue='Sex', data=titanic_df)
plt.title('Survival by Sex')
plt.show()

sns.countplot(x='Survived', hue='Pclass', data=titanic_df)
plt.title('Survival by Pclass')
plt.show()

# Preprocess the data
# Drop unnecessary columns
titanic_df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)

# Fill missing values
titanic_df['Age'].fillna(titanic_df['Age'].median(), inplace=True)
titanic_df['Embarked'].fillna(titanic_df['Embarked'].mode()[0], inplace=True)

# Convert categorical variables into dummy/indicator variables
titanic_df = pd.get_dummies(titanic_df, columns=['Sex', 'Embarked'], drop_first=True)

# Train-test split
X = titanic_df.drop('Survived', axis=1)
y = titanic_df['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Random Forest classifier
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(X_train, y_train)

# Predictions
y_pred_train = rf_classifier.predict(X_train)
y_pred_test = rf_classifier.predict(X_test)

# Evaluate the model
train_accuracy = accuracy_score(y_train, y_pred_train)
test_accuracy = accuracy_score(y_test, y_pred_test)
print('Train Accuracy:', train_accuracy)
print('Test Accuracy:', test_accuracy)

# Classification report and confusion matrix
print('Classification Report (Test Data):\n', classification_report(y_test, y_pred_test))
print('Confusion Matrix (Test Data):\n', confusion_matrix(y_test, y_pred_test))